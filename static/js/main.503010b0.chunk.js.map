{"version":3,"sources":["components/CustomBadge.js","components/NavBar.js","components/CustomButton.js","components/TextForm.js","components/CustomAlert.js","App.js","index.js"],"names":["CustomBadge","type","txt","setMode","otherProps","Badge","pill","className","bg","onClick","NavBar","title","mode","clrObj","variant","Navbar","expand","style","backgroundColor","Container","fluid","Brand","href","Toggle","aria-controls","Collapse","id","Nav","maxHeight","navbarScroll","text","defaultProps","CustomButton","Button","TextForm","heading","showAlert","useState","setText","color","Form","Group","Control","as","value","onChange","e","target","rows","placeholder","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","arr","trim","split","str","forEach","ar","reverse","join","filter","a","length","toFixed","CustomAlert","alert","Alert","dismissible","message","colorArr","name","App","setAlert","setTimeout","useEffect","body","find","cl","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.503010b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Badge } from \"react-bootstrap\";\r\n\r\nexport default function CustomBadge({ type, txt, setMode, ...otherProps }) {\r\n  return (\r\n    <Badge\r\n      pill\r\n      className=\"pill-style\"\r\n      bg={type}\r\n      onClick={() => setMode(type)}\r\n      {...otherProps}\r\n    >\r\n      {txt}\r\n    </Badge>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// import { Link } from \"react-router-dom\";\r\nimport CustomBadge from \"./CustomBadge\";\r\n\r\nexport default function NavBar({ title, mode, setMode, clrObj }) {\r\n  const variant = mode === \"info\" || mode === \"light\" ? \"light\" : \"dark\";\r\n\r\n  return (\r\n    <Navbar\r\n      variant={variant}\r\n      expand=\"lg\"\r\n      style={{ backgroundColor: `${clrObj.backgroundColor}` }}\r\n    >\r\n      <Container fluid>\r\n        <Navbar.Brand href=\"#\">{title}</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n        <Navbar.Collapse id=\"navbarScroll\">\r\n          <Nav\r\n            className=\"me-auto my-2 my-lg-0\"\r\n            style={{ maxHeight: \"100px\" }}\r\n            navbarScroll\r\n          >\r\n            {/* <Nav.Link href=\"#\">Home</Nav.Link>\r\n            <Nav.Link href=\"#\">About</Nav.Link> */}\r\n          </Nav>\r\n\r\n          <CustomBadge type=\"primary\" setMode={setMode} txt=\"Blue\" />\r\n          <CustomBadge type=\"secondary\" setMode={setMode} txt=\"Gray\" />\r\n          <CustomBadge type=\"success\" setMode={setMode} txt=\"Green\" />\r\n          <CustomBadge type=\"danger\" setMode={setMode} txt=\"Red\" />\r\n          <CustomBadge type=\"warning\" setMode={setMode} txt=\"Yellow\" />\r\n          <CustomBadge type=\"info\" setMode={setMode} txt=\"Sky Blue\" />\r\n          <CustomBadge type=\"light\" setMode={setMode} txt=\"Light\" text=\"dark\" />\r\n          <CustomBadge type=\"dark\" setMode={setMode} txt=\"Dark\" />\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  title: \"Place title here\",\r\n};\r\n\r\n// Dark Mode Options\r\n\r\n/* <Form.Check\r\n              type=\"switch\"\r\n              id=\"custom-switch\"\r\n              onClick={toggleMode}\r\n              className={`text-${mode === \"dark\" ? \"light\" : \"dark\"}`}\r\n              label={mode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\r\n            /> */\r\n\r\n/* <Button\r\n            variant={\"primary\"}\r\n            onClick={toggleMode}\r\n            className={`text-${mode === \"dark\" ? \"light\" : \"dark\"}`}\r\n          >\r\n            {mode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\r\n          </Button> */\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport default function CustomButton({ onClick, text }) {\r\n  return (\r\n    <Button onClick={onClick} className=\"btn-style\" variant=\"primary\">\r\n      {text}\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\nimport CustomButton from \"./CustomButton\";\r\n\r\nexport default function TextForm({ heading, mode, showAlert, clrObj }) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleOnUppercase = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    showAlert(\"Converted to UpperCase!\", \"success\");\r\n  };\r\n\r\n  const handleOnLowercase = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    showAlert(\"Converted to LoweCase!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let txt = document.getElementById(\"txtArea\");\r\n    txt.select();\r\n    navigator.clipboard.writeText(txt.value);\r\n    showAlert(\"Copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleWordsReverse = () => {\r\n    let arr = text.trim().split(\" \");\r\n    let str = \"\";\r\n    arr.forEach((ar) => {\r\n      str += ar.split(\"\").reverse().join(\"\") + \" \";\r\n    });\r\n\r\n    setText(str.trim());\r\n    showAlert(\"All words has been reversed!\", \"success\");\r\n  };\r\n\r\n  const handleStringReverse = () => {\r\n    let arr = text.trim().split(\"\");\r\n    setText(arr.reverse().join(\"\"));\r\n    showAlert(\"String has been reversed!\", \"success\");\r\n  };\r\n\r\n  const handleOnCapital = () => {\r\n    let arr = text.trim().split(\" \");\r\n    let str = \"\";\r\n    arr.forEach((ar) => {\r\n      ar = ar.split(\"\");\r\n      ar[0] = ar[0].toUpperCase();\r\n      str += ar.join(\"\") + \" \";\r\n    });\r\n\r\n    setText(str.trim());\r\n    showAlert(\"First latter capitalized!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    showAlert(\"Extra spaces has been removed!\", \"success\");\r\n  };\r\n\r\n  const handleOnClear = () => {\r\n    setText(\"\");\r\n\r\n    showAlert(\"Text has been cleared!\", \"danger\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        className=\"my-3\"\r\n        style={{ color: mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <Form>\r\n          <Form.Group className=\"mb-3\">\r\n            <h1>{heading}</h1>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              value={text}\r\n              id=\"txtArea\"\r\n              onChange={(e) => setText(e.target.value)}\r\n              rows={8}\r\n              style={{\r\n                backgroundColor: `${clrObj.color}`,\r\n                color: mode === \"light\" ? \"black\" : \"white\",\r\n              }}\r\n              placeholder=\"Enter text here ...\"\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        <CustomButton onClick={handleOnUppercase} text=\"Convert to Uppercase\" />\r\n        <CustomButton onClick={handleOnLowercase} text=\"Convert to LowerCase\" />\r\n        <CustomButton onClick={handleCopy} text=\"Copy Text\" />\r\n        <CustomButton onClick={handleWordsReverse} text=\"Reverse all Words\" />\r\n        <CustomButton onClick={handleStringReverse} text=\"Reverse String\" />\r\n        <CustomButton onClick={handleOnCapital} text=\"Capitalize Words\" />\r\n        <CustomButton onClick={handleExtraSpaces} text=\"Remove extra spaces\" />\r\n        <CustomButton onClick={handleOnClear} text=\"Clear all words\" />\r\n\r\n        <h2 className=\"my-3\">Text Summary</h2>\r\n        <p>\r\n          <b>{text.split(\" \").filter((a) => a !== \"\").length}</b> words &{\" \"}\r\n          <b>{text.length}</b> character\r\n        </p>\r\n        <p>\r\n          <b>\r\n            {(text.split(\" \").filter((a) => a !== \"\").length * 0.008).toFixed(\r\n              3\r\n            )}\r\n          </b>{\" \"}\r\n          minutes to read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter text in the above textbox to preview here.\"}\r\n        </p>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nexport default function CustomAlert({ alert }) {\r\n  return (\r\n    alert && (\r\n      <Alert variant={alert.type} dismissible>\r\n        <h5>{alert.message}</h5>\r\n      </Alert>\r\n    )\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n// import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport NavBar from \"./components/NavBar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport CustomAlert from \"./components/CustomAlert\";\n\nconst colorArr = [\n  {\n    type: \"primary\",\n    name: \"Blue\",\n    color: \"#112f82\",\n    backgroundColor: \"#051c42\",\n  },\n  {\n    type: \"secondary\",\n    name: \"Gray\",\n    color: \"#5e6161\",\n    backgroundColor: \"#434444\",\n  },\n  {\n    type: \"success\",\n    color: \"#1f502a\",\n    name: \"Green\",\n    backgroundColor: \"#092403\",\n  },\n  {\n    type: \"danger\",\n    color: \"#992124\",\n    name: \"Red\",\n    backgroundColor: \"#64080a\",\n  },\n  {\n    type: \"warning\",\n    color: \"#d3cd17\",\n    name: \"Yellow\",\n    backgroundColor: \"#a39e0a\",\n  },\n  {\n    type: \"info\",\n    color: \"#1dcbdb\",\n    name: \"Sky Blue\",\n    backgroundColor: \"#0a96a3\",\n  },\n  {\n    type: \"dark\",\n    color: \"#383838\",\n    name: \"Dark\",\n    backgroundColor: \"#141414\",\n  },\n  {\n    type: \"light\",\n    color: \"#d6e3da\",\n    name: \"Light\",\n    backgroundColor: \"#c1c1c1\",\n  },\n];\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message,\n      type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n  const toggleMode = () => {\n    document.body.style.backgroundColor = clrObj.color;\n    showAlert(`${clrObj.name} Mode has been enabled!`, \"success\");\n  };\n  useEffect(() => {\n    toggleMode();\n  }, [mode]);\n\n  const clrObj = colorArr.find((cl) => cl.type === mode);\n\n  return (\n    <>\n      <NavBar mode={mode} setMode={setMode} clrObj={clrObj} title=\"TextUtils\" />\n      <CustomAlert alert={alert} />\n      {/* <Routes>\n        <Route\n          exact\n          path=\"/\"\n          element={ */}\n      <TextForm\n        heading=\"Enter the text to analyze below\"\n        mode={mode}\n        showAlert={showAlert}\n        clrObj={clrObj}\n      />\n      {/* }\n        />\n        <Route exact path=\"/about\" element={<About />} />\n\n        <Route path=\"*\" element={<NotFound />} /> */}\n      {/* </Routes> */}\n    </>\n  );\n}\n\nexport default App;\n\n// if (mode === \"light\") {\n// setMode(\"dark\");\n//   document.body.style.backgroundColor = \"#042743\";\n//   showAlert(\"Dark Mode has been enabled!\", \"success\");\n// } else {\n//   document.body.style.backgroundColor = \"white\";\n// setMode(\"light\");\n//   showAlert(\"Light Mode has been enabled!\", \"success\");\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}