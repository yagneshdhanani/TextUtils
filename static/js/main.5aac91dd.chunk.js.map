{"version":3,"sources":["config/color.js","components/CustomBadge.js","components/NavBar.js","components/CustomButton.js","components/TextForm.js","components/CustomAlert.js","App.js","index.js"],"names":["module","exports","type","name","color","backgroundColor","secondaryBgColor","CustomBadge","txt","setMode","textType","className","onClick","NavBar","title","href","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","CustomButton","disabled","TextForm","heading","mode","showAlert","clrObj","useState","text","setText","style","value","onChange","e","target","rows","placeholder","newText","toUpperCase","length","toLowerCase","navigator","clipboard","writeText","arr","trim","split","str","forEach","ar","reverse","join","filter","a","toFixed","CustomAlert","alert","role","message","defaultProps","App","setAlert","NotificationManager","success","warning","info","setTimeout","colorArr","find","cl","useEffect","document","body","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5aac91dd.chunk.js","sourcesContent":["const colorArr = [\r\n  {\r\n    type: \"primary\",\r\n    name: \"Blue\",\r\n    color: \"#051c42\",\r\n    backgroundColor: \"#112f82\",\r\n    secondaryBgColor: \"#114ef5\",\r\n  },\r\n  {\r\n    type: \"secondary\",\r\n    name: \"Gray\",\r\n    color: \"#434444\",\r\n    backgroundColor: \"#5e6161\",\r\n    secondaryBgColor: \"#a0a3a3\",\r\n  },\r\n  {\r\n    type: \"success\",\r\n    name: \"Green\",\r\n    color: \"#092403\",\r\n    backgroundColor: \"#1f502a\",\r\n    secondaryBgColor: \"#31ad4d\",\r\n  },\r\n  {\r\n    type: \"danger\",\r\n    name: \"Red\",\r\n    color: \"#64080a\",\r\n    backgroundColor: \"#992124\",\r\n    secondaryBgColor: \"#ff383c\",\r\n  },\r\n  {\r\n    type: \"warning\",\r\n    name: \"Yellow\",\r\n    color: \"#a39e0a\",\r\n    backgroundColor: \"#d3cd17\",\r\n    secondaryBgColor: \"#fff814\",\r\n  },\r\n  {\r\n    type: \"info\",\r\n    name: \"Sky Blue\",\r\n    color: \"#0a96a3\",\r\n    backgroundColor: \"#1dcbdb\",\r\n    secondaryBgColor: \"#57f1ff\",\r\n  },\r\n  {\r\n    type: \"dark\",\r\n    name: \"Dark\",\r\n    color: \"#141414\",\r\n    backgroundColor: \"#383838\",\r\n    secondaryBgColor: \"#5c5c5c\",\r\n  },\r\n  {\r\n    type: \"light\",\r\n    name: \"Light\",\r\n    color: \"#c1c1c1\",\r\n    backgroundColor: \"#d6e3da\",\r\n    secondaryBgColor: \"#e6e6e6\",\r\n  },\r\n];\r\n\r\nmodule.exports = colorArr;\r\n","import React from \"react\";\r\n\r\nexport default function CustomBadge({ type, txt, setMode, textType }) {\r\n  return (\r\n    <span\r\n      className={`badge bg-${type} pill-style ${textType}`}\r\n      onClick={() => setMode(type)}\r\n    >\r\n      {txt}\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// import { Link } from \"react-router-dom\";\r\nimport CustomBadge from \"./CustomBadge\";\r\n\r\nexport default function NavBar({ title, setMode }) {\r\n  return (\r\n    <nav className=\"navbar navbar-dark navbar-expand-lg bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                About\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          <CustomBadge type=\"primary\" setMode={setMode} txt=\"Blue\" />\r\n          <CustomBadge type=\"secondary\" setMode={setMode} txt=\"Gray\" />\r\n          <CustomBadge type=\"success\" setMode={setMode} txt=\"Green\" />\r\n          <CustomBadge type=\"danger\" setMode={setMode} txt=\"Red\" />\r\n          <CustomBadge type=\"warning\" setMode={setMode} txt=\"Yellow\" />\r\n          <CustomBadge type=\"info\" setMode={setMode} txt=\"Sky Blue\" />\r\n          <CustomBadge\r\n            type=\"light\"\r\n            setMode={setMode}\r\n            txt=\"Light\"\r\n            textType=\"text-dark\"\r\n          />\r\n          <CustomBadge type=\"dark\" setMode={setMode} txt=\"Dark\" />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  title: \"Place title here\",\r\n};\r\n\r\n// Dark Mode Options\r\n\r\n/* <Form.Check\r\n              type=\"switch\"\r\n              id=\"custom-switch\"\r\n              onClick={toggleMode}\r\n              className={`text-${mode === \"dark\" ? \"light\" : \"dark\"}`}\r\n              label={mode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\r\n            /> */\r\n\r\n/* <Button\r\n            variant={\"primary\"}\r\n            onClick={toggleMode}\r\n            className={`text-${mode === \"dark\" ? \"light\" : \"dark\"}`}\r\n          >\r\n            {mode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}\r\n          </Button> */\r\n","import React from \"react\";\r\n\r\nexport default function CustomButton({ onClick, name, disabled }) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-primary btn-style\"\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n    >\r\n      {name}\r\n    </button>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport CustomButton from \"./CustomButton\";\r\n\r\nexport default function TextForm({ heading, mode, showAlert, clrObj }) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleOnUppercase = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    showAlert(\"Converted to UpperCase!\", \"success\");\r\n  };\r\n\r\n  const handleOnLowercase = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    showAlert(\"Converted to LoweCase!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    showAlert(\"Copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleWordsReverse = () => {\r\n    let arr = text.trim().split(\" \");\r\n    let str = \"\";\r\n    arr.forEach((ar) => {\r\n      str += ar.split(\"\").reverse().join(\"\") + \" \";\r\n    });\r\n\r\n    setText(str.trim());\r\n    showAlert(\"All words has been reversed!\", \"success\");\r\n  };\r\n\r\n  const handleStringReverse = () => {\r\n    let arr = text.trim().split(\"\");\r\n    setText(arr.reverse().join(\"\"));\r\n    showAlert(\"String has been reversed!\", \"success\");\r\n  };\r\n\r\n  const handleOnCapital = () => {\r\n    let arr = text.trim().split(\" \");\r\n    let str = \"\";\r\n    arr.forEach((ar) => {\r\n      ar = ar.split(\"\");\r\n      ar[0] = ar[0].toUpperCase();\r\n      str += ar.join(\"\") + \" \";\r\n    });\r\n\r\n    setText(str.trim());\r\n    showAlert(\"First latter capitalized!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    showAlert(\"Extra spaces has been removed!\", \"success\");\r\n  };\r\n\r\n  const handleOnClear = () => {\r\n    setText(\"\");\r\n\r\n    showAlert(\"Text has been cleared!\", \"warning\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container my-3\"\r\n      style={{ color: mode === \"light\" ? \"black\" : \"white\" }}\r\n    >\r\n      <form>\r\n        <div className=\"mb-3\">\r\n          <h1>{heading}</h1>\r\n\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"txtArea\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            rows={8}\r\n            style={{\r\n              backgroundColor: `${clrObj.backgroundColor}`,\r\n              color: mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n            placeholder=\"Enter text here ...\"\r\n          ></textarea>\r\n        </div>\r\n      </form>\r\n\r\n      <CustomButton\r\n        onClick={handleOnUppercase}\r\n        disabled={text.length === 0}\r\n        name=\"Convert to Uppercase\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleOnLowercase}\r\n        disabled={text.length === 0}\r\n        name=\"Convert to LowerCase\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleCopy}\r\n        disabled={text.length === 0}\r\n        name=\"Copy Text\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleWordsReverse}\r\n        disabled={text.length === 0}\r\n        name=\"Reverse all Words\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleStringReverse}\r\n        disabled={text.length === 0}\r\n        name=\"Reverse String\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleOnCapital}\r\n        disabled={text.length === 0}\r\n        name=\"Capitalize Words\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleExtraSpaces}\r\n        disabled={text.length === 0}\r\n        name=\"Remove Extra Spaces\"\r\n      />\r\n      <CustomButton\r\n        onClick={handleOnClear}\r\n        disabled={text.length === 0}\r\n        name=\"Clear all Words\"\r\n      />\r\n\r\n      <h2 className=\"my-3\">Text Summary</h2>\r\n      <p>\r\n        <b>{text.split(/\\s+/).filter((a) => a !== \"\").length}</b> words &{\" \"}\r\n        <b>{text.length}</b> character\r\n      </p>\r\n      <p>\r\n        <b>\r\n          {(text.split(\" \").filter((a) => a !== \"\").length * 0.008).toFixed(3)}\r\n        </b>{\" \"}\r\n        minutes to read\r\n      </p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length > 0 ? text : \"Noting to preview!!\"}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function CustomAlert({ alert }) {\r\n  return (\r\n    // <div style={{ height: \"50px\" }}>\r\n    alert && (\r\n      <div\r\n        className={`alert alert-${alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{alert.message}</strong>\r\n      </div>\r\n    )\r\n    // </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n// import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport \"react-notifications/lib/notifications.css\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"./App.css\";\n\nimport colorArr from \"./config/color\";\n\nimport NavBar from \"./components/NavBar\";\nimport TextForm from \"./components/TextForm\";\nimport CustomAlert from \"./components/CustomAlert\";\n\n// import About from \"./components/About\";\n// import NotFound from \"./components/NotFound\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    switch (type) {\n      case \"success\":\n        NotificationManager.success(message, \"\", 1000);\n        break;\n      case \"warning\":\n        NotificationManager.warning(message, \"\", 1000);\n        break;\n      case \"info\":\n        NotificationManager.info(message, \"\", 1000);\n        break;\n\n      default:\n        break;\n    }\n    // setAlert({\n    //   message,\n    //   type,\n    // });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  const clrObj = colorArr.find((cl) => cl.type === mode);\n\n  const toggleMode = () => {\n    document.body.style.backgroundColor = clrObj.color;\n    showAlert(`${clrObj.name} Mode has been enabled!`, \"info\");\n  };\n  useEffect(() => {\n    toggleMode();\n    // eslint-disable-next-line\n  }, [mode]);\n\n  return (\n    <>\n      {/* <Router> */}\n      <NavBar setMode={setMode} title=\"TextUtils\" />\n      <CustomAlert alert={alert} />\n      {/* <Routes>\n        <Route\n          exact\n          path=\"/\"\n          element={ */}\n      <TextForm\n        heading=\"Try TextUtils - word counter, character counter, remove extra spaces\"\n        mode={mode}\n        showAlert={showAlert}\n        clrObj={clrObj}\n      />\n      {/* }\n        /> */}\n      {/* <Route\n          exact\n          path=\"/about\"\n          element={<About mode={mode} clrObj={clrObj} />}\n        />\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes> */}\n      <NotificationContainer />\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n\n// if (mode === \"light\") {\n// setMode(\"dark\");\n//   document.body.style.backgroundColor = \"#042743\";\n//   showAlert(\"Dark Mode has been enabled!\", \"success\");\n// } else {\n//   document.body.style.backgroundColor = \"white\";\n// setMode(\"light\");\n//   showAlert(\"Light Mode has been enabled!\", \"success\");\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}